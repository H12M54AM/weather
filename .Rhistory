y = rnorm(8)
summary(x)
summary(x)
x = 1:8
summary(x)
hist(x)
hist(num)
# Plotting Data
num <- c(1, 2, 4, 5, 2, 3, 4, 7)
summary(num)
hist(num)
x = 1:8
y = rnorm(8)
plot(x, y, type = "l", col = "black", xlab = "X-Axis", ylab = "Y-axis", main = "Example Chart")
createLineChart(x, y, "Unit Numbers", "Percentage", "2024 Change in Pertentage")
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
source("~/SoftwareProjects/r-projects/charts/main-charts.R")
source("~/SoftwareProjects/r-projects/charts/main-charts.R")
createLineChart <- function(x, y, xLabel, yLabel, title) {
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
}
createLineChart(x, y, "Unit Numbers", "Percentage", "2024 Change in Pertentage")
boxplot(num)
# Normal graphs
normInts = rnorm(50)
hist(normInts)
hist(normInts)
# Normal graphs
normInts = rnorm(50)
hist(normInts)
source("~/SoftwareProjects/r-projects/charts/main-charts.R")
hist(normInts)
y = rnorm(20)
createLineChart <- function(x, y, xLabel, yLabel, title) {
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
}
createLineChart(x, y, "Unit Numbers", "Percentage", "2024 Change in Pertentage")
# Plotting Data
num <- c(1, 2, 4, 5, 2, 3, 4, 7)
summary(num)
hist(num)
boxplot(num)
# Normal graphs
normInts = rnorm(50)
hist(normInts)
source("~/SoftwareProjects/r-projects/charts/main-charts.R")
source("~/SoftwareProjects/r-projects/charts/main-charts.R")
x = rnorm(5)
y = rnorm(20)
createLineChart <- function(x, y, xLabel, yLabel, title) {
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
}
createLineChart(x, y, "Unit Numbers", "Percentage", "2024 Change in Pertentage")
x = 1:8
y = rnorm(8)
createLineChart <- function(x, y, xLabel, yLabel, title) {
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
}
createLineChart(x, y, "Unit Numbers", "Percentage", "2024 Change in Pertentage")
x = array(c("Candy", "Beverages", "Meats", "Produce"))
y = rnorm(4)
createLineChart <- function(x, y, xLabel, yLabel, title) {
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
}
createLineChart(x, y, "Unit Numbers", "Percentage", "2024 Change in Pertentage")
y <- rnorm(4)
x <- 1:length(y)
createLineChart <- function(x, y, xLabel, yLabel, title) {
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
}
createLineChart(x, y, "Unit Numbers", "Percentage", "2024 Change in Percentage")
x <- "1:length(y)", "grg", "vfb", "vrvr"
x <- c("1:length(y)", "grg", "vfb", "vrvr")
y <- rnorm(4)
createLineChart <- function(x, y, xLabel, yLabel, title) {
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
}
createLineChart(x, y, "Unit Numbers", "Percentage", "2024 Change in Percentage")
#factors
tmp = c("Bently", "Toyota", "Hyundai", "Honda", "Ford")
cars = factor(tmp)
print(cars)
prices = c(100000, 20000, 15000, 16000, 80000)
summary(prices)
boxplot(prices)
hist(prices)
plot(cars, prices, type="b", col="black", xlab="Car Names", ylab="Total Amount in CAD", "2024 Prices per Car Brand")
plot(cars, prices, type="b", col="black", xlab="Car Names", ylab="Total Amount in CAD", main="2024 Prices per Car Brand")
plot(cars, prices, type="l", col="black", xlab="Car Names", ylab="Total Amount in CAD", main="2024 Prices per Car Brand")
plot(cars, prices, type="l", col="black", xlab="Car Names", ylab="Total Amount in CAD", main="2024 Prices per Car Brand")
plot(cars, prices, type="p", col="black", xlab="Car Names", ylab="Total Amount in CAD", main="2024 Prices per Car Brand")
createLineChart(x, y, "Unit Numbers", "Percentage", "2024 Change in Percentage")
x <- c("1:length(y)", "grg", "vfb", "vrvr")
y <- rnorm(4)
createLineChart <- function(x, y, xLabel, yLabel, title) {
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
}
createLineChart(x, y, "Unit Numbers", "Percentage", "2024 Change in Percentage")
x <- 1:length(y)
y <- rnorm(4)
createLineChart <- function(x, y, xLabel, yLabel, title) {
plot(x, y, type = "l", col = "black", xlab = xLabel, ylab = yLabel, main = title)
}
createLineChart(x, y, "Unit Numbers", "Percentage", "2024 Change in Percentage")
prices = c(100000, 20000, 15000, 16000, 80000)
#factors
tmp = c("Bently", "Toyota", "Hyundai", "Honda", "Ford")
cars = factor(tmp)
plot(cars, prices, type="l", col="black", xlab="Car Names", ylab="Total Amount in CAD", main="2024 Prices per Car Brand")
format(prices, scientific = FALSE)
plot(cars, prices, type="l", col="black", xlab="Car Names", ylab="Total Amount in CAD", main="2024 Prices per Car Brand")
#factors
tmp = c("Bently", "Toyota", "Hyundai", "Honda", "Ford")
cars = factor(tmp)
#Cars Example
print(cars)
prices = c(100000, 20000, 15000, 16000, 80000)
format(prices, scientific = FALSE)
summary(prices)
boxplot(prices)
hist(prices)
plot(cars, prices, type="l", col="black", xlab="Car Names", ylab="Total Amount in CAD", main="2024 Prices per Car Brand")
library(ggplot2)
source("~/SoftwareProjects/r-projects/charts/main-charts.R")
source("~/SoftwareProjects/r-projects/charts/main-charts.R")
# Change the y-axis labels to regular numbers
ggplot(df, aes(x1, y1)) + geom_point() + scale_y_continuous(labels = c("s"))
# Change the y-axis labels to regular numbers
ggplot(df, aes(x1, y1)) + geom_point() + scale_y_continuous(labels = c("s"))
# Change the y-axis labels to regular numbers
ggplot(df, aes(x1, y1)) + geom_point() + scale_y_continuous(labels = c("s", "e", "e", "d", "s"))
plot(cars, format(prices, scientific = FALSE), type="l", col="black", xlab="Car Names", ylab="Total Amount in CAD", main="2024 Prices per Car Brand")
#factors
tmp = c("Bently", "Toyota", "Hyundai", "Honda", "Ford")
cars = factor(tmp)
#Cars Example
print(cars)
prices = c(100000, 20000, 15000, 16000, 80000)
summary(prices)
boxplot(prices)
hist(prices)
plot(cars, format(prices, scientific = FALSE), type="l", col="black", xlab="Car Names", ylab="Total Amount in CAD", main="2024 Prices per Car Brand")
shiny::runApp('Users/edward_1/SoftwareProjects/r-projects/shiny-projects/DummyData')
runApp('Users/edward_1/SoftwareProjects/r-projects/shiny-projects/Weather/weather-view')
runApp('Users/edward_1/SoftwareProjects/r-projects/shiny-projects/Weather/weather-view')
runApp('Users/edward_1/SoftwareProjects/r-projects/shiny-projects/Weather/weather-view')
install.packages("learnr")
runApp('Users/edward_1/SoftwareProjects/r-projects/shiny-projects/Weather/weather-view')
runApp('Users/edward_1/SoftwareProjects/r-projects/shiny-projects/Weather/weather-view')
library(bslib)
detach("package:bslib", unload = TRUE)
library(bslib)
library(boot)
runApp('Users/edward_1/SoftwareProjects/r-projects/shiny-projects/Weather/weather-view')
runApp('Users/edward_1/SoftwareProjects/r-projects/shiny-projects/Weather/weather-view')
runApp('Users/edward_1/SoftwareProjects/r-projects/shiny-projects/Weather/weather-view')
runApp('Users/edward_1/SoftwareProjects/r-projects/shiny-projects/Weather/weather-view')
runApp('Users/edward_1/SoftwareProjects/r-projects/shiny-projects/Weather/weather-view')
runApp('Users/edward_1/SoftwareProjects/r-projects/shiny-projects/Weather/weather-view')
runApp('Users/edward_1/SoftwareProjects/r-projects/shiny-projects/Weather/weather-view')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/SoftwareProjects/r-projects/shiny-projects/Weather/weather-view/weather-test.R")
print(fetchData())
print(fetchData()$temp)
print(summary(fetchData()$temp))
print("Max: ", max(fetchData()$temp))
print("Max: ", max(as.numeric(fetchData()$temp)))
print("Max: ", max(list(as.numeric(fetchData()$temp))))
library(httr)
library(jsonlite)
library(lubridate)
fetchData <- function() {
response <- GET("https://api.open-meteo.com/v1/forecast?latitude=49.2608724&longitude=-123.113952&hourly=temperature_2m&timeformat=unixtime&timezone=America%2FLos_Angeles&forecast_days=1")
if (status_code(response) >= 200 && status_code(response) < 400) {
data <- content(response, "parsed")
data <- fromJSON(data)
return(list(
time = data$hourly$time,
temp = data$hourly$temperature_2m
))
}
if (status_code(response) >= 400 && status_code(response) < 500) {
return("API Failed due to Human Error")
}
if (status_code(response) >= 500 && status_code(response) < 600) {
return("API Failed due to Server Side Error\n\nPlease review the server...")
}
}
print(fetchData()$temp)
print("Max: ", max(as.numeric(fetchData()$temp)))
print("Min: ", min(fetchData()$temp))
print("Average: ", mean(fetchData()$temp))
print("Max: ", max(as.numeric(fromJSON(fetchData()$temp))))
library(httr)
library(jsonlite)
fetchData <- function() {
response <- GET("https://api.open-meteo.com/v1/forecast?latitude=49.2608724&longitude=-123.113952&hourly=temperature_2m&timeformat=unixtime&timezone=America%2FLos_Angeles&forecast_days=1")
if (status_code(response) >= 200 && status_code(response) < 400) {
data <- fromJSON(content(response, "text"))
return(list(
time = data$hourly$time,
temp = data$hourly$temperature_2m
))
}
if (status_code(response) >= 400 && status_code(response) < 500) {
return("API Failed due to Human Error")
}
if (status_code(response) >= 500 && status_code(response) < 600) {
return("API Failed due to Server Side Error\n\nPlease review the server...")
}
}
# Get the temperature data
data <- fetchData()
# Print the temperature data
print(data$temp)
# Calculate and print the max, min, and average temperature
print("Max: ", max(as.numeric(data$temp)))
print("Min: ", min(as.numeric(data$temp)))
print("Average: ", mean(as.numeric(data$temp)))
# Calculate and print the max, min, and average temperature
print("Max: " +  max(as.numeric(data$temp)))
plot(data$time, data$temp, main = "Hourly Changes in Temperature in Vancouver")
plot(data$time, data$temp, type = "b", main = "Hourly Changes in Temperature in Vancouver")
# Calculate and print the max, min, and average temperature
cat("Max: ",  max(as.numeric(data$temp)))
cat("Min: ", min(as.numeric(data$temp)))
cat("Average: ", mean(as.numeric(data$temp)))
# Calculate and print the max, min, and average temperature
cat("Max: ",  max(as.numeric(data$temp)), "˚C")
cat("Min: ", min(as.numeric(data$temp)), "˚C")
cat("Average: ", mean(as.numeric(data$temp)), "˚C")
cat("IQR: ", IQR(data$temp, na.rm = TRUE))
# Define Unix timestamp
unix_timestamp <- 1648565400
# Convert to R-readable timestamp
r_timestamp <- as.Date(as.POSIXct(unix_timestamp, origin = "1970-01-01"))
# View the converted timestamp
print(r_timestamp)
# Example Unix timestamp
unix_timestamp <- 1683449760  # May 7, 2023 at 11:26 PM
# Convert Unix timestamp to R-readable timestamp
r_timestamp <- as.POSIXct(unix_timestamp, origin = "1970-01-01")
# Extract the hour of the day
hour_of_day <- format(r_timestamp, "%H")
# Print the hour of the day
print(paste("Hour of the day:", hour_of_day))
# Extract the hour of the day
hour_of_day <- format(r_timestamp, "%H%M$S")
# Print the hour of the day
print(paste("Hour of the day:", hour_of_day))
# Extract the hour of the day
hour_of_day <- format(r_timestamp, "%H%MM$SM")
# Print the hour of the day
print(paste("Hour of the day:", hour_of_day))
# Extract the hour of the day
hour_of_day <- format(r_timestamp, "%H:%MM:%SS")
# Print the hour of the day
print(paste("Hour of the day:", hour_of_day))
# Extract the hour of the day
hour_of_day <- format(r_timestamp, "%H:%M:%S")
# Print the hour of the day
print(paste("Hour of the day:", hour_of_day))
# Convert Unix timestamp to R-readable timestamp
r_timestamp <- as.POSIXct(data$time, origin = "1970-01-01")
# Extract the hour of the day
hour_of_day <- format(r_timestamp, "%H:%M:%S")
# Print the hour of the day
print(paste("Hour of the day:", hour_of_day))
plot(data$time, data$temp, type = "b", main = "Hourly Changes in Temperature in Vancouver")
plot(hour_of_day, data$temp, type = "b", main = "Hourly Changes in Temperature in Vancouver")
plot(hour_of_day, data$temp, xlim = length(hour_of_day), type = "b", main = "Hourly Changes in Temperature in Vancouver")
# Convert Unix timestamp to R-readable timestamp
r_timestamp <- as.POSIXct(as.numeric(data$time), origin = "1970-01-01")
# Extract the hour of the day
hour_of_day <- format(r_timestamp, "%H:%M:%S")
# Print the hour of the day
print(paste("Hour of the day:", hour_of_day))
plot(hour_of_day, data$temp, xlim = length(hour_of_day), type = "b", main = "Hourly Changes in Temperature in Vancouver")
plot(hour_of_day, data$temp, xlim = c(min(data$time), max(data$time)), ylim = c(min(data$temp), max(data$temp)), type = "b", main = "Hourly Changes in Temperature in Vancouver")
xSpacing = c(min(as.numeric(data$time)), max(as.numeric(data$time)))
ySpacing = c(min(as.numeric(data$temp)), max(as.numeric(data$temp)))
plot(hour_of_day, data$temp, xlim = xSpacing, ylim = ySpacing, type = "b", main = "Hourly Changes in Temperature in Vancouver")
xSpacing = c(min(as.numeric(data$time), na.rm = TRUE), max(as.numeric(data$time), na.rm = TRUE))
plot(hour_of_day, data$temp, xlim = xSpacing, ylim = ySpacing, type = "b", main = "Hourly Changes in Temperature in Vancouver")
ySpacing = c(min(as.numeric(data$temp), na.rm = TRUE), max(as.numeric(data$temp), na.rm = TRUE))
plot(hour_of_day, data$temp, xlim = xSpacing, ylim = ySpacing, type = "b", main = "Hourly Changes in Temperature in Vancouver")
# Convert Unix timestamp to R-readable timestamp
r_timestamp <- as.Date(as.POSIXct(as.numeric(data$time), origin = "1970-01-01"))
# Extract the hour of the day
hour_of_day <- format(r_timestamp, "%H:%M:%S")
# Print the hour of the day
print(paste("Hour of the day:", hour_of_day))
print(r_timestamp)
# Print the hour of the day
print(paste("Hour of the day:", hour_of_day))
print(dateConverted)
dateConverted <- as.Date(r_timestamp)
print(dateConverted)
# Print the hour of the day
cat("Hour of the day:", hour_of_day))
# Print the hour of the day
cat("Hour of the day:", hour_of_day)
# Extract the hour of the day
hour_of_day <- format(r_timestamp, "%Y-%m-%d %H:%M:%S")
# Print the hour of the day
cat("Hour of the day:", hour_of_day)
# Print the hour of the day
print(cat("Hour of the day:", hour_of_day))
# Print the hour of the day
print(cat("Hour of the day:", hour_of_day))
# Print the hour of the day
print(paste("Hour of the day:", hour_of_day))
unconverted <- as.POSIXct(as.numeric(data$time), origin = "1970-01-01")
print(unconverted)
# Isolates the Time from the Datetime
unconverted_hours <- format(unconverted, "%H:%M:%S")
print(unconverted_hours)
# Isolates the Time from the Datetime
unconverted_hours <- format(unconverted, "%H:%M")
print(unconverted_hours)
xSpacing = c(0, 24)
ySpacing = c(min(as.numeric(data$temp), na.rm = TRUE), max(as.numeric(data$temp), na.rm = TRUE))
plot(hour_of_day, data$temp, xlim = xSpacing, ylim = ySpacing, type = "b", main = "Hourly Changes in Temperature in Vancouver")
plot(unconverted_hours, data$temp, xlim = xSpacing, ylim = ySpacing, type = "b", main = "Hourly Changes in Temperature in Vancouver")
plot(unconverted_hours, data$temp, type = "b", main = "Hourly Changes in Temperature in Vancouver")
ySpacing = c(min(as.numeric(data$temp), na.rm = TRUE), max(as.numeric(data$temp), na.rm = TRUE))
plot(unconverted_hours, data$temp, xlim = 0:24, ylim = ySpacing, type = "b", main = "Hourly Changes in Temperature in Vancouver")
plot(unconverted_hours, data$temp, xlim = c(0,24), ylim = ySpacing, type = "b", main = "Hourly Changes in Temperature in Vancouver")
plot(unconverted_hours, data$temp, xlim = unconverted_hours, ylim = ySpacing, type = "b", main = "Hourly Changes in Temperature in Vancouver")
c(0,24)
plot(unconverted_hours, data$temp, xlim = c(0,24), ylim = ySpacing, type = "b", main = "Hourly Changes in Temperature in Vancouver")
# Print the temperature data
print(data$temp)
runApp()
plot(unconverted, data$temp, xlim = range(date$time), type = "b", main = "Hourly Changes in Temperature in Vancouver")
plot(unconverted, data$temp, xlim = range(data$time), type = "b", main = "Hourly Changes in Temperature in Vancouver")
runApp()
runApp()
runApp()
runApp('~/SoftwareProjects/r-projects/shiny-projects/translink')
reticulate::repl_python()
library(here)
library(tidyverse)
library(here)
library(tidyverse)
raw_data <- read_csv(here("data", "sources.csv"))
raw_data <- read_csv("../data/sources.csv")
print(raw_data)
raw_data <- read_csv("../data/sources.csv")
raw_data <- read_csv("../data/sources.csv")
source("~/SoftwareProjects/r-projects/Data Preprocessing/main.R")
source("~/SoftwareProjects/r-projects/Data Preprocessing/main.R")
source("~/SoftwareProjects/r-projects/Data Preprocessing/main.R")
source("~/SoftwareProjects/r-projects/Data Preprocessing/main.R")
cd ..
